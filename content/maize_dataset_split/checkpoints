{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyNsgcS1yd+oOhGOLvsFScTk",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Disha-Sikka/Maize_Disease_Classification/blob/main/content/maize_dataset_split/checkpoints\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "Vszt_6TYpcFP"
      },
      "outputs": [],
      "source": [
        "!mkdir -p ~/.kaggle\n",
        "!cp kaggle.json ~/.kaggle/"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!kaggle competitions download -c ssd-3-l-maiize-disease-classification"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AkmlBXsmprNw",
        "outputId": "cc8368fc-b826-4ac5-d425-6f0a64e9b8e1"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Warning: Your Kaggle API key is readable by other users on this system! To fix this, you can run 'chmod 600 /root/.kaggle/kaggle.json'\n",
            "Downloading ssd-3-l-maiize-disease-classification.zip to /content\n",
            " 57% 92.0M/161M [00:00<00:00, 964MB/s]\n",
            "100% 161M/161M [00:00<00:00, 976MB/s] \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import zipfile\n",
        "zip_ref= zipfile.ZipFile('/content/ssd-3-l-maiize-disease-classification.zip')\n",
        "zip_ref.extractall('/content')\n",
        "zip_ref.close()"
      ],
      "metadata": {
        "id": "Jo2EoHttpuyn"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "BASE_DIR = \"/content/maize_dataset_split\"\n",
        "TRAIN_DIR = os.path.join(BASE_DIR, \"train\")\n",
        "VAL_DIR = os.path.join(BASE_DIR, \"val\")\n",
        "TEST_DIR = os.path.join(BASE_DIR, \"test\")\n",
        "CHECKPOINT_DIR = os.path.join(BASE_DIR, \"checkpoints\")\n",
        "os.makedirs(CHECKPOINT_DIR, exist_ok=True)\n",
        "\n",
        "NUM_CLASSES = 4\n",
        "BATCH_SIZE = 32\n",
        "EPOCHS = 15\n",
        "LR = 0.001\n",
        "LABELS = ['Blight', 'Common_Rust', 'Gray_Leaf_Spot', 'Healthy']"
      ],
      "metadata": {
        "id": "ALAHSZxTp3xT"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "from torchvision import datasets, transforms\n",
        "from torch.utils.data import DataLoader\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from tqdm import tqdm\n"
      ],
      "metadata": {
        "id": "NQS4Q0_Ns3FT"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_transforms = transforms.Compose([\n",
        "    transforms.Resize((128, 128)),\n",
        "    transforms.RandomHorizontalFlip(),\n",
        "    transforms.ToTensor()\n",
        "])\n",
        "\n",
        "val_test_transforms = transforms.Compose([\n",
        "    transforms.Resize((128, 128)),\n",
        "    transforms.ToTensor()\n",
        "])\n",
        "\n",
        "train_dataset = datasets.ImageFolder(TRAIN_DIR, transform=train_transforms)\n",
        "val_dataset = datasets.ImageFolder(VAL_DIR, transform=val_test_transforms)\n",
        "\n",
        "train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)\n",
        "val_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False)\n"
      ],
      "metadata": {
        "id": "5ysgaBhgtKNl"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class SimpleCNN(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(SimpleCNN, self).__init__()\n",
        "        self.model = nn.Sequential(\n",
        "            nn.Conv2d(3, 32, kernel_size=3, padding=1),\n",
        "            nn.ReLU(), nn.MaxPool2d(2),  # 64x64\n",
        "\n",
        "            nn.Conv2d(32, 64, kernel_size=3, padding=1),\n",
        "            nn.ReLU(), nn.MaxPool2d(2),  # 32x32\n",
        "\n",
        "            nn.Conv2d(64, 128, kernel_size=3, padding=1),\n",
        "            nn.ReLU(), nn.MaxPool2d(2),  # 16x16\n",
        "\n",
        "            nn.Flatten(),\n",
        "            nn.Linear(128 * 16 * 16, 512),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout(0.5),\n",
        "            nn.Linear(512, NUM_CLASSES)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.model(x)\n",
        "\n",
        "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "model = SimpleCNN().to(DEVICE)\n",
        "\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=LR)\n"
      ],
      "metadata": {
        "id": "WXYMTDOWtg-Z"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_losses, val_losses, val_accuracies = [], [], []\n",
        "\n",
        "for epoch in range(EPOCHS):\n",
        "    model.train()\n",
        "    epoch_train_loss = 0\n",
        "    for imgs, labels in tqdm(train_loader, desc=f\"Epoch {epoch+1}/{EPOCHS}\"):\n",
        "        imgs, labels = imgs.to(DEVICE), labels.to(DEVICE)\n",
        "        optimizer.zero_grad()\n",
        "        outputs = model(imgs)\n",
        "        loss = criterion(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        epoch_train_loss += loss.item()\n",
        "\n",
        "    train_losses.append(epoch_train_loss / len(train_loader))\n",
        "\n",
        "    # ✅ Validation\n",
        "    model.eval()\n",
        "    val_loss, correct = 0, 0\n",
        "    total = 0\n",
        "    with torch.no_grad():\n",
        "        for imgs, labels in val_loader:\n",
        "            imgs, labels = imgs.to(DEVICE), labels.to(DEVICE)\n",
        "            outputs = model(imgs)\n",
        "            val_loss += criterion(outputs, labels).item()\n",
        "            preds = torch.argmax(outputs, dim=1)\n",
        "            correct += (preds == labels).sum().item()\n",
        "            total += labels.size(0)\n",
        "\n",
        "    val_losses.append(val_loss / len(val_loader))\n",
        "    val_accuracies.append(correct / total)\n",
        "    print(f\"✅ Epoch {epoch+1}: Val Acc = {100*correct/total:.2f}%, Train Loss = {train_losses[-1]:.4f}\")\n",
        "\n",
        "    # Save checkpoint\n",
        "    torch.save(model.state_dict(), os.path.join(CHECKPOINT_DIR, f\"model_epoch{epoch+1}.pth\"))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7scmwdQpthgp",
        "outputId": "151e9693-8d04-4134-bcb6-dcab0463b867"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 1/15: 100%|██████████| 92/92 [00:13<00:00,  7.02it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Epoch 1: Val Acc = 82.48%, Train Loss = 0.7614\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 2/15: 100%|██████████| 92/92 [00:11<00:00,  7.76it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Epoch 2: Val Acc = 82.64%, Train Loss = 0.4747\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3/15: 100%|██████████| 92/92 [00:12<00:00,  7.50it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Epoch 3: Val Acc = 85.51%, Train Loss = 0.4140\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/15: 100%|██████████| 92/92 [00:11<00:00,  7.82it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Epoch 4: Val Acc = 87.90%, Train Loss = 0.3490\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/15: 100%|██████████| 92/92 [00:11<00:00,  7.69it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Epoch 5: Val Acc = 84.55%, Train Loss = 0.3537\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/15: 100%|██████████| 92/92 [00:11<00:00,  7.75it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Epoch 6: Val Acc = 88.54%, Train Loss = 0.2996\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/15: 100%|██████████| 92/92 [00:11<00:00,  7.82it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Epoch 7: Val Acc = 88.38%, Train Loss = 0.2903\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/15: 100%|██████████| 92/92 [00:11<00:00,  7.76it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Epoch 8: Val Acc = 87.90%, Train Loss = 0.2653\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 9/15: 100%|██████████| 92/92 [00:11<00:00,  7.76it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Epoch 9: Val Acc = 88.22%, Train Loss = 0.2465\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 10/15: 100%|██████████| 92/92 [00:11<00:00,  7.87it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Epoch 10: Val Acc = 89.97%, Train Loss = 0.2311\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 11/15: 100%|██████████| 92/92 [00:11<00:00,  7.68it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Epoch 11: Val Acc = 91.24%, Train Loss = 0.2513\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 12/15: 100%|██████████| 92/92 [00:11<00:00,  7.71it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Epoch 12: Val Acc = 90.13%, Train Loss = 0.2032\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 13/15: 100%|██████████| 92/92 [00:11<00:00,  7.76it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Epoch 13: Val Acc = 91.40%, Train Loss = 0.1907\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 14/15: 100%|██████████| 92/92 [00:11<00:00,  7.72it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Epoch 14: Val Acc = 90.13%, Train Loss = 0.1763\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 15/15: 100%|██████████| 92/92 [00:11<00:00,  7.69it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Epoch 15: Val Acc = 90.45%, Train Loss = 0.1590\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,4))\n",
        "plt.subplot(1,2,1)\n",
        "plt.plot(train_losses, label=\"Train Loss\")\n",
        "plt.plot(val_losses, label=\"Val Loss\")\n",
        "plt.legend(); plt.title(\"Loss\")\n",
        "\n",
        "plt.subplot(1,2,2)\n",
        "plt.plot(val_accuracies, label=\"Val Accuracy\")\n",
        "plt.legend(); plt.title(\"Accuracy\")\n",
        "\n",
        "plt.savefig(os.path.join(BASE_DIR, \"metrics_plot.png\"))\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "jToPQHuYtkw-",
        "outputId": "e9af3f73-dd19-4df5-bd1c-2026d4575c19"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x400 with 2 Axes>"
            ],
            "image/png": "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RWJjY9m7d6/05ogaI8UIhKgCV1dXrKysiI6Ovum2U6dOoVar8fT0NOxzcnJi/PjxjB8/nuzsbPr27cusWbN46qmnDG18fHx49dVXefXVVzl9+jQdO3bkk08+YcWKFbVyn4QQQlS/lStX4ubmxoIFC266be3atfzyyy8sWrQIHx8fjh8/fttz+fj4sG/fPoqKijA1NS2zjaOjI6Cv4HajCxculDvmY8eOERMTw7fffsuYMWMM+2+sFgoYhm7fKW6AkSNHEhYWxvfff09eXh6mpqaMGDGi3DEJURHSoyNEFWg0GgYOHMhvv/1WqgR0UlISq1atonfv3tjZ2QFw5cqVUsfa2NjQunVrCgoKAMjNzSU/P79UGx8fH2xtbQ1thBBC1D95eXmsXbuWBx54gEcfffSmbfLkyWRlZbFu3ToeeeQRjhw5UmYZZkVRAH2FztTUVL744otbtmnRogUajYZ//vmn1O1ffvlluePWaDSlzlny+6efflqqnaurK3379mXJkiXExcWVGU8JFxcX7rvvPlasWMHKlSu59957cXFxKXdMQlSE9OgIUU5Llixh48aNN+2fNWsWmzdvpnfv3jz//POYmJjw1VdfUVBQwIcffmhoFxgYSL9+/ejSpQtOTk4cOHCAn376icmTJwMQExPDgAEDGD58OIGBgZiYmPDLL7+QlJTEyJEja+1+CiGEqF7r1q0jKyuLBx98sMzbu3fvblg8dNWqVfz000889thjTJgwgS5dupCWlsa6detYtGgRHTp0YMyYMSxfvpywsDAiIiLo06cPOTk5bNmyheeff56hQ4dib2/PY489xueff45KpcLHx4c//viD5OTkcsft7++Pj48Pr732GgkJCdjZ2fHzzz+XWTDns88+o3fv3nTu3JlnnnmGli1bcv78edavX8/hw4dLtR0zZgyPPvooAHPmzCn/AylERRmz5JsQ9UFJeelbbfHx8UpkZKQyaNAgxcbGRrGyslL69++v7N69u9R53nnnHaVbt26Kg4ODYmlpqfj7+yvvvvuuUlhYqCiKoqSmpiovvPCC4u/vr1hbWyv29vZKSEiI8sMPPxjjbgshhKgmQ4YMUSwsLJScnJxbthk3bpxiamqqpKamKleuXFEmT56sNGvWTDEzM1OaN2+ujB07VklNTTW0z83NVd58802lZcuWiqmpqeLh4aE8+uijpZY6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g7FyyRye+SMiTeINQ4mINMJb74U/x9xainrwxk18fd6GI9Z2/G/zTzh3zY5z1+woPtaElOhgrEuU8GRcBG9OqmLXen/911BzpQdn23sxfNN5x/MWhc5EUlQQksyzkBgVhCVhM2HQewlITETknnhGh4hIpboHbuBYYycqrO042fLL6HaDlw4rl8zB2kQJjy0Lwwyff/89LR5/x3avXpehEQfOtveODjWnrvSg0z50x/NMft5IMgchKWoWksxBSIgMgmkGlyEnIs/EMzpERBo3y99ndMnqjp5fcfRMByqsHfi/DjuqmmyoarLBz1uPx5aF4T+fjEGE6d5f2kb/nn98exkV1g6cv2bHTafr+416Lx1iwgNcBpvo2f68DI2IaIo46BARaYAU5Ie/P7IQf39kIS7Z+nDE2oGK0x1o/XkQX53rxM4N8aIj0m909AyN3utmToARy823LkFLigpCfKTpD52FIyKiW3gkJSLSmEWhAch/fCm2PrYEp6/24mJXH2Yaebh3JxuWz8XyebeGG8nky7M1RETTgM1HRKRROp0OiVFBSIwKEh2Ffidurglxc02iYxARaRqXZyEiIiIiIs3hoENERERERJrDQYeIiIiIiDSHgw4REREREWkOBx0iIiIiItIcDjpERERERKQ5HHSIiIiIiEhzOOgQEREREZHmcNAhIiIiIiLN4aBDRERERESaYxAdYDJkWQYA2O12wUmIiDzL7ePu7eMw3cJeIiISZ7LdpIpBp6+vDwAQFRUlOAkRkWfq6+uDyWQSHcNtsJeIiMSbqJt0sgrepnM6nejo6EBAQAB0Ot2U/73dbkdUVBTa2toQGBg4DQnvPTVmBphbaWrMrcbMgOfmlmUZfX19kCQJXl682vk2T+wlgLmVpsbcaswMMLfSlOomVZzR8fLyQmRk5B/+OYGBgar6IwDUmRlgbqWpMbcaMwOemZtncu7kyb0EMLfS1JhbjZkB5lbadHcT354jIiIiIiLN4aBDRERERESa4xGDjtFoxPbt22E0GkVHmTQ1ZgaYW2lqzK3GzABz072l1v8X5laWGnOrMTPA3EpTKrcqFiMgIiIiIiKaCo84o0NERERERJ6Fgw4REREREWkOBx0iIiIiItIcDjpERERERKQ5mh909u3bh/nz58PX1xepqamoq6sTHWlcxcXFePDBBxEQEIDQ0FCsX78ezc3NomNN2ZtvvgmdToe8vDzRUSbU3t6O559/HiEhIfDz80N8fDx++OEH0bHuyuFwoKioCNHR0fDz88PChQvx+uuvw93WFfnmm2+QkZEBSZKg0+lw+PBhl8dlWcZrr72GiIgI+Pn5IT09HRcvXhQT9jfGyz0yMoLCwkLEx8fD398fkiThhRdeQEdHh7jA/zTR6/1bL730EnQ6HXbv3q1YPnLFblIee2l6sZumlxq7yR16SdODzieffIL8/Hxs374dFosFCQkJWL16NWw2m+hod1VTU4OcnBzU1taisrISIyMjePzxxzEwMCA62qTV19fjgw8+wP333y86yoS6u7uRlpYGb29vHDt2DOfOncPbb7+NWbNmiY52VyUlJSgtLcX777+P8+fPo6SkBLt27cLevXtFR3MxMDCAhIQE7Nu3b8zHd+3ahT179mD//v04efIk/P39sXr1agwNDSmc1NV4uQcHB2GxWFBUVASLxYLPP/8czc3NWLt2rYCkriZ6vW8rLy9HbW0tJElSKBn9HrtJeeyl6cduml5q7Ca36CVZw1JSUuScnJzR7x0OhyxJklxcXCww1dTYbDYZgFxTUyM6yqT09fXJixcvlisrK+WVK1fKubm5oiONq7CwUH744YdFx5iSNWvWyJs2bXLZtmHDBjkzM1NQookBkMvLy0e/dzqdcnh4uPzWW2+Nbuvp6ZGNRqP88ccfC0g4tt/nHktdXZ0MQG5tbVUm1CTcLffVq1fluXPnyo2NjfK8efPkd999V/FsxG5SGntJGewm5aixm0T1kmbP6Ny4cQMNDQ1IT08f3ebl5YX09HR8//33ApNNTW9vLwAgODhYcJLJycnJwZo1a1xed3d25MgRJCcn45lnnkFoaCiSkpLw4Ycfio41rhUrVqCqqgoXLlwAAJw+fRonTpzAE088ITjZ5LW0tKCzs9Pl78RkMiE1NVVV+ydwax/V6XQICgoSHWVcTqcTWVlZKCgoQGxsrOg4HovdpDz2kjLYTe5FDd2kRC8ZpuWnuoHr16/D4XAgLCzMZXtYWBiampoEpZoap9OJvLw8pKWlIS4uTnScCR06dAgWiwX19fWio0za5cuXUVpaivz8fLzyyiuor6/Hli1b4OPjg+zsbNHxxrRt2zbY7XbExMRAr9fD4XBgx44dyMzMFB1t0jo7OwFgzP3z9mNqMDQ0hMLCQjz33HMIDAwUHWdcJSUlMBgM2LJli+goHo3dpCz2knLYTe5DLd2kRC9pdtDRgpycHDQ2NuLEiROio0yora0Nubm5qKyshK+vr+g4k+Z0OpGcnIydO3cCAJKSktDY2Ij9+/e7baF8+umn+Oijj3Dw4EHExsbCarUiLy8PkiS5bWYtGhkZwcaNGyHLMkpLS0XHGVdDQwPee+89WCwW6HQ60XFI5dTSTewlZbGb3INaukmpXtLspWuzZ8+GXq9HV1eXy/auri6Eh4cLSjV5mzdvxtGjR1FdXY3IyEjRcSbU0NAAm82G5cuXw2AwwGAwoKamBnv27IHBYIDD4RAdcUwRERFYtmyZy7b77rsPV65cEZRoYgUFBdi2bRueffZZxMfHIysrC1u3bkVxcbHoaJN2ex9U6/55u0haW1tRWVnp1u+YAcC3334Lm80Gs9k8un+2trbi5Zdfxvz580XH8yjsJuWwl5TFbhJPTd2kVC9pdtDx8fHBAw88gKqqqtFtTqcTVVVVeOihhwQmG58sy9i8eTPKy8tx/PhxREdHi440KatWrcLZs2dhtVpHv5KTk5GZmQmr1Qq9Xi864pjS0tLuWCL1woULmDdvnqBEExscHISXl+uuq9fr4XQ6BSWauujoaISHh7vsn3a7HSdPnnTr/RP4V5FcvHgRX3/9NUJCQkRHmlBWVhbOnDnjsn9KkoSCggJ8+eWXouN5FHaTcthLymI3iaW2blKqlzR96Vp+fj6ys7ORnJyMlJQU7N69GwMDA3jxxRdFR7urnJwcHDx4EBUVFQgICBi9JtRkMsHPz09wursLCAi441ptf39/hISEuPU13Fu3bsWKFSuwc+dObNy4EXV1dSgrK0NZWZnoaHeVkZGBHTt2wGw2IzY2FqdOncI777yDTZs2iY7mor+/H5cuXRr9vqWlBVarFcHBwTCbzcjLy8Mbb7yBxYsXIzo6GkVFRZAkCevXrxcXGuPnjoiIwNNPPw2LxYKjR4/C4XCM7qPBwcHw8fERFXvC1/v3peft7Y3w8HAsXbpU6agej92kDPaSsthN00uN3eQWvXRP13BzQ3v37pXNZrPs4+Mjp6SkyLW1taIjjQvAmF8HDhwQHW3K1LCMpyzL8hdffCHHxcXJRqNRjomJkcvKykRHGpfdbpdzc3Nls9ks+/r6ygsWLJBfffVVeXh4WHQ0F9XV1WP+LWdnZ8uyfGsZz6KiIjksLEw2Go3yqlWr5ObmZrGh5fFzt7S03HUfra6udtvcY+Hy0mKxm8RgL00fdtP0UmM3uUMv6WTZzW5ZS0RERERE9Adp9jM6RERERETkuTjoEBERERGR5nDQISIiIiIizeGgQ0REREREmsNBh4iIiIiINIeDDhERERERaQ4HHSIiIiIi0hwOOkREREREpDkcdIiIiIiISHM46BARERERkeZw0CEiIiIiIs3hoENERERERJrz/1xdAW1S1oLlAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# to flatten all images from subfolders\n",
        "import os\n",
        "import shutil\n",
        "\n",
        "test_dir = TEST_DIR\n",
        "for subdir in os.listdir(test_dir):\n",
        "    sub_path = os.path.join(test_dir, subdir)\n",
        "    if os.path.isdir(sub_path):\n",
        "        for file in os.listdir(sub_path):\n",
        "            shutil.move(os.path.join(sub_path, file), test_dir)\n",
        "        os.rmdir(sub_path)\n"
      ],
      "metadata": {
        "id": "TbUZ1kUKvRtQ"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from torch.utils.data import Dataset\n",
        "from PIL import Image\n",
        "\n",
        "class TestImageDataset(Dataset):\n",
        "    def __init__(self, img_dir, transform=None):\n",
        "        self.img_dir = img_dir\n",
        "        self.image_ids = sorted(os.listdir(img_dir))\n",
        "        self.transform = transform\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.image_ids)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        image_id = self.image_ids[idx]\n",
        "        img_path = os.path.join(self.img_dir, image_id)\n",
        "        image = Image.open(img_path).convert(\"RGB\")\n",
        "        if self.transform:\n",
        "            image = self.transform(image)\n",
        "        return image, image_id\n",
        "\n",
        "test_dataset = TestImageDataset(TEST_DIR, transform=val_test_transforms)\n",
        "test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)\n",
        "\n",
        "# Load best model (update epoch number as needed)\n",
        "model.load_state_dict(torch.load(os.path.join(CHECKPOINT_DIR, \"model_epoch15.pth\")))\n",
        "model.eval()\n",
        "\n",
        "predictions = []\n",
        "with torch.no_grad():\n",
        "    for imgs, img_ids in tqdm(test_loader, desc=\"Predicting\"):\n",
        "        imgs = imgs.to(DEVICE)\n",
        "        outputs = model(imgs)\n",
        "        preds = torch.argmax(outputs, dim=1).cpu().numpy()\n",
        "        for img_id, pred in zip(img_ids, preds):\n",
        "            predictions.append([img_id, LABELS[pred]])\n",
        "\n",
        "# Save CSV\n",
        "submission_path = os.path.join(BASE_DIR, \"submission.csv\")\n",
        "import csv\n",
        "with open(submission_path, \"w\", newline=\"\") as f:\n",
        "    writer = csv.writer(f)\n",
        "    writer.writerow([\"image_id\", \"label\"])\n",
        "    writer.writerows(predictions)\n",
        "\n",
        "print(\"✅ submission.csv saved at:\", submission_path)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lhx6Ev1EvHWF",
        "outputId": "1b9564c0-0b88-49dd-d463-80431f8eb6e8"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Predicting: 100%|██████████| 20/20 [00:03<00:00,  6.39it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ submission.csv saved at: /content/maize_dataset_split/submission.csv\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "80yLFpbEv2jG"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}